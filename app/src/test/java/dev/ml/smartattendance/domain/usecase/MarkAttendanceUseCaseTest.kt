package dev.ml.smartattendance.domain.usecase

import dev.ml.smartattendance.data.entity.AttendanceRecord
import dev.ml.smartattendance.data.entity.Event
import dev.ml.smartattendance.domain.model.AttendanceStatus
import dev.ml.smartattendance.domain.model.PenaltyType
import dev.ml.smartattendance.domain.model.biometric.AuthResult
import dev.ml.smartattendance.domain.model.location.Location
import dev.ml.smartattendance.domain.repository.AttendanceRepository
import dev.ml.smartattendance.domain.repository.EventRepository
import dev.ml.smartattendance.domain.service.BiometricAuthenticator
import dev.ml.smartattendance.domain.service.GeofenceManager
import dev.ml.smartattendance.domain.service.LocationProvider
import dev.ml.smartattendance.domain.service.PenaltyCalculationService\nimport kotlinx.coroutines.test.runTest\nimport org.junit.Before\nimport org.junit.Test\nimport org.mockito.Mock\nimport org.mockito.MockitoAnnotations\nimport org.mockito.kotlin.whenever\nimport org.mockito.kotlin.verify\nimport org.mockito.kotlin.any\nimport org.mockito.kotlin.never\nimport kotlin.test.assertEquals\nimport kotlin.test.assertTrue\n\nclass MarkAttendanceUseCaseTest {\n    \n    @Mock\n    private lateinit var attendanceRepository: AttendanceRepository\n    \n    @Mock\n    private lateinit var eventRepository: EventRepository\n    \n    @Mock\n    private lateinit var biometricAuthenticator: BiometricAuthenticator\n    \n    @Mock\n    private lateinit var locationProvider: LocationProvider\n    \n    @Mock\n    private lateinit var geofenceManager: GeofenceManager\n    \n    @Mock\n    private lateinit var penaltyCalculationService: PenaltyCalculationService\n    \n    private lateinit var markAttendanceUseCase: MarkAttendanceUseCase\n    \n    private val studentId = \"STUDENT001\"\n    private val eventId = \"EVENT001\"\n    private val currentTime = System.currentTimeMillis()\n    \n    @Before\n    fun setup() {\n        MockitoAnnotations.openMocks(this)\n        markAttendanceUseCase = MarkAttendanceUseCase(\n            attendanceRepository,\n            eventRepository,\n            biometricAuthenticator,\n            locationProvider,\n            geofenceManager,\n            penaltyCalculationService\n        )\n    }\n    \n    @Test\n    fun `execute should return error when event not found`() = runTest {\n        // Given\n        whenever(eventRepository.getEventById(eventId)).thenReturn(null)\n        \n        // When\n        val result = markAttendanceUseCase.execute(studentId, eventId)\n        \n        // Then\n        assertTrue(result is MarkAttendanceUseCase.AttendanceResult.Error)\n        assertEquals(\"Event not found\", (result as MarkAttendanceUseCase.AttendanceResult.Error).message)\n    }\n    \n    @Test\n    fun `execute should return error when attendance already marked`() = runTest {\n        // Given\n        val event = createMockEvent()\n        val existingRecord = createMockAttendanceRecord()\n        \n        whenever(eventRepository.getEventById(eventId)).thenReturn(event)\n        whenever(attendanceRepository.getAttendanceRecord(studentId, eventId)).thenReturn(existingRecord)\n        \n        // When\n        val result = markAttendanceUseCase.execute(studentId, eventId)\n        \n        // Then\n        assertTrue(result is MarkAttendanceUseCase.AttendanceResult.Error)\n        assertEquals(\"Attendance already marked for this event\", (result as MarkAttendanceUseCase.AttendanceResult.Error).message)\n    }\n    \n    @Test\n    fun `execute should return error when location unavailable`() = runTest {\n        // Given\n        val event = createMockEvent()\n        \n        whenever(eventRepository.getEventById(eventId)).thenReturn(event)\n        whenever(attendanceRepository.getAttendanceRecord(studentId, eventId)).thenReturn(null)\n        whenever(locationProvider.getCurrentLocation()).thenReturn(null)\n        \n        // When\n        val result = markAttendanceUseCase.execute(studentId, eventId)\n        \n        // Then\n        assertTrue(result is MarkAttendanceUseCase.AttendanceResult.Error)\n        assertEquals(\"Unable to get current location\", (result as MarkAttendanceUseCase.AttendanceResult.Error).message)\n    }\n    \n    @Test\n    fun `execute should return error when outside geofence`() = runTest {\n        // Given\n        val event = createMockEvent()\n        val location = createMockLocation()\n        \n        whenever(eventRepository.getEventById(eventId)).thenReturn(event)\n        whenever(attendanceRepository.getAttendanceRecord(studentId, eventId)).thenReturn(null)\n        whenever(locationProvider.getCurrentLocation()).thenReturn(location)\n        whenever(geofenceManager.isWithinGeofence(eventId, location)).thenReturn(false)\n        \n        // When\n        val result = markAttendanceUseCase.execute(studentId, eventId)\n        \n        // Then\n        assertTrue(result is MarkAttendanceUseCase.AttendanceResult.Error)\n        assertEquals(\"You are not within the event location\", (result as MarkAttendanceUseCase.AttendanceResult.Error).message)\n    }\n    \n    @Test\n    fun `execute should return error when biometric authentication fails`() = runTest {\n        // Given\n        val event = createMockEvent()\n        val location = createMockLocation()\n        \n        whenever(eventRepository.getEventById(eventId)).thenReturn(event)\n        whenever(attendanceRepository.getAttendanceRecord(studentId, eventId)).thenReturn(null)\n        whenever(locationProvider.getCurrentLocation()).thenReturn(location)\n        whenever(geofenceManager.isWithinGeofence(eventId, location)).thenReturn(true)\n        whenever(biometricAuthenticator.authenticate()).thenReturn(AuthResult.Error(dev.ml.smartattendance.domain.model.biometric.BiometricError.AuthenticationFailed))\n        \n        // When\n        val result = markAttendanceUseCase.execute(studentId, eventId)\n        \n        // Then\n        assertTrue(result is MarkAttendanceUseCase.AttendanceResult.Error)\n        assertEquals(\"Biometric authentication failed\", (result as MarkAttendanceUseCase.AttendanceResult.Error).message)\n    }\n    \n    @Test\n    fun `execute should successfully mark attendance when all conditions met`() = runTest {\n        // Given\n        val event = createMockEvent()\n        val location = createMockLocation()\n        \n        whenever(eventRepository.getEventById(eventId)).thenReturn(event)\n        whenever(attendanceRepository.getAttendanceRecord(studentId, eventId)).thenReturn(null)\n        whenever(locationProvider.getCurrentLocation()).thenReturn(location)\n        whenever(geofenceManager.isWithinGeofence(eventId, location)).thenReturn(true)\n        whenever(biometricAuthenticator.authenticate()).thenReturn(AuthResult.Success)\n        whenever(penaltyCalculationService.calculatePenalty(any())).thenReturn(null)\n        \n        // When\n        val result = markAttendanceUseCase.execute(studentId, eventId)\n        \n        // Then\n        assertTrue(result is MarkAttendanceUseCase.AttendanceResult.Success)\n        verify(attendanceRepository).insertAttendanceRecord(any())\n    }\n    \n    private fun createMockEvent(): Event {\n        return Event(\n            id = eventId,\n            name = \"Test Event\",\n            startTime = currentTime,\n            endTime = currentTime + 3600000, // 1 hour later\n            latitude = 14.5995,\n            longitude = 120.9842,\n            geofenceRadius = 50f,\n            signInStartOffset = 30,\n            signInEndOffset = 15,\n            signOutStartOffset = 30,\n            signOutEndOffset = 15\n        )\n    }\n    \n    private fun createMockLocation(): Location {\n        return Location(\n            latitude = 14.5995,\n            longitude = 120.9842,\n            accuracy = 10f,\n            timestamp = currentTime\n        )\n    }\n    \n    private fun createMockAttendanceRecord(): AttendanceRecord {\n        return AttendanceRecord(\n            id = \"RECORD001\",\n            studentId = studentId,\n            eventId = eventId,\n            timestamp = currentTime,\n            status = AttendanceStatus.PRESENT,\n            penalty = null,\n            latitude = 14.5995,\n            longitude = 120.9842\n        )\n    }\n}"